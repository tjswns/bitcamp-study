/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.79
 * Generated at: 2023-08-28 08:34:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import bitcamp.myapp.vo.Member;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("bitcamp.myapp.vo.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      bitcamp.myapp.dao.MemberDao memberDao = null;
      synchronized (application) {
        memberDao = (bitcamp.myapp.dao.MemberDao) _jspx_page_context.getAttribute("memberDao", javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (memberDao == null){
          throw new java.lang.InstantiationException("bean memberDao not found within scope");
        }
      }

    Member member = memberDao.findBy(Integer.parseInt(request.getParameter("no")));

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset='UTF-8'>\r\n");
      out.write("    <title>회원</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../header.jsp", out, false);
      out.write("<h1>회원</h1>\r\n");
      out.write("\r\n");

    if (member == null) {

      out.write("<p>해당 번호의 회원이 없습니다!</p>\r\n");

} else {

      out.write("<form action='/member/update.jsp' method='post' enctype='multipart/form-data'>\r\n");
      out.write("    <table border='1'>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th style='width:120px;'>사진</th>\r\n");
      out.write("            <td style='width:300px;'>");
      out.print(
            member.getPhoto() == null ? "<img style='height:80px' src='/images/avatar.png'>" :
                    String.format("<a href='https://kr.object.ncloudstorage.com/bitcamp-nc7-bucket-17/member/%s'>"
                            + "<img src='http://rckgyxwydznu19204086.cdn.ntruss.com/member/%1$s?type=f&w=60&h=80&faceopt=true&ttype=jpg'>"
                            + "</a>", member.getPhoto()));
      out.write("<input type='file' name='photo'></td></tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th style='width:120px;'>번호</th>\r\n");
      out.write("            <td style='width:300px;'><input type='text' name='no' value='");
      out.print(member.getNo());
      out.write("' readonly></td></tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>이름</th>\r\n");
      out.write("            <td><input type='text' name='name' value='");
      out.print(member.getName());
      out.write("'></td></tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>이메일</th>\r\n");
      out.write("            <td><input type='email' name='email' value='");
      out.print(member.getEmail());
      out.write("'></td></tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>암호</th>\r\n");
      out.write("            <td><input type='password' name='password'></td></tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>성별</th>\r\n");
      out.write("            <td><select name='gender'>\r\n");
      out.write("                <option value='M' ");
      out.print(member.getGender() == 'M' ? "selected" : "");
      out.write(">남자</option>\r\n");
      out.write("                <option value='W' ");
      out.print(member.getGender() == 'W' ? "selected" : "");
      out.write(">여자</option></select></td></tr>\r\n");
      out.write("    </table>\r\n");
      out.write("    <div>\r\n");
      out.write("        <button>변경</button>\r\n");
      out.write("        <button type='reset'>초기화</button>\r\n");
      out.write("        <a href='/member/delete.jsp?no=");
      out.print(member.getNo());
      out.write("'>삭제</a>\r\n");
      out.write("        <a href='/member/list.jsp'>목록</a>\r\n");
      out.write("    </div>\r\n");
      out.write("</form>\r\n");

    }

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../footer.jsp", out, false);
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
